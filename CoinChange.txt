public class Solution {
    public int CoinChange(int[] coins, int amount) {
        
    int[] d = new int[amount + 1];
	for(int i = 1; i <= amount; i++)
	{
		d[i] = int.MaxValue;
		for(int j = 0; j < coins.Length; j++)
		{                
			if(i >= coins[j] && d[i - coins[j]] != int.MaxValue)
			{
				d[i] = Math.Min(d[i], 1 + d[i - coins[j]]);
			}
		}
	}

	return d[amount] == int.MaxValue ? -1 : d[amount];
        /*
            int n = coins.Length;
            int[,] dp = new int[n + 1, amount + 1];
            for (int i = 0; i <= n; i++)
            {
                for (int j = 0; j <= amount; j++)
                {
                    if (j == 0)
                    {
                        dp[i, j] = 0;
                    }
                    else if (i == 0)
                    {
                        dp[i, j] = int.MaxValue;
                    }
                    else if (coins[i - 1] > j)
                    {
                        dp[i, j] = dp[i - 1, j];
                    }
                    else
                    {
                        dp[i, j] = Math.Min(dp[i - 1, j], 1 + dp[i, j - coins[i - 1]]);
                    }
                }
            }
            if (dp[n, amount] == int.MinValue )
            {
                return -1;
            }
            else
            {
                return dp[n, amount];
            }
            */
    }
}